import argparse
import json
import os
import pathlib
import shutil
import subprocess
import time
import zipfile
from typing import Final, List


def copy_zip_to_directory(zip_file_path, target_directory):
    """
    Копирует ZIP-архив в указанную директорию.

    :param zip_file_path: Путь к ZIP-архиву.
    :param target_directory: Директория, в которую нужно скопировать ZIP-архив.
    :return: Путь к новому местоположению ZIP-архива.
    """
    if not os.path.isfile(zip_file_path):
        raise FileNotFoundError(f"Файл {zip_file_path} не найден.")

    # Проверка, что целевая директория существует, если нет, то создаем ее
    if not os.path.exists(target_directory):
        os.makedirs(target_directory)

    # Определяем новое местоположение файла
    destination = os.path.join(target_directory, os.path.basename(zip_file_path))

    # Копируем файл
    shutil.copy2(zip_file_path, destination)

    return destination


def clone_repo(repo_url, dest_dir, token=None):
    repo_name = repo_url.split('/')[-1].replace('.git', '')
    repo_dir = os.path.join(dest_dir, repo_name)

    if token:
        if repo_url.startswith("https://"):
            repo_url = repo_url.replace("https://", f"https://{token}@")
        else:
            raise ValueError("Для использования токена необходим HTTPS URL репозитория.")

    print(f"Cloning repository from URL: {repo_url}")
    subprocess.run(['git', 'clone', repo_url, repo_dir], check=True)
    return repo_dir


def extract_archives_in(directory):
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if zipfile.is_zipfile(item_path):
            print(f"Extracting archive: {item_path}")
            with zipfile.ZipFile(item_path, 'r') as zip_ref:
                zip_ref.extractall(directory)
            os.remove(item_path)


def load_gitignore(directory):
    gitignore_path = directory / '.gitignore'
    ignore_patterns = []
    if gitignore_path.exists():
        with open(gitignore_path, 'r') as file:
            ignore_patterns = [line.strip() for line in file if line.strip() and not line.startswith('#')]
    return ignore_patterns


def save_results_to_json(results, json_file):
    with open(json_file, 'w', encoding='utf-8') as jf:
        json.dump(results, jf, indent=4)
    print(f"Results saved to {json_file}")
    print("=" * 44)
    print(results)


def remove_all_files(directory):
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if os.path.isfile(item_path) or os.path.islink(item_path):
            os.unlink(item_path)
        elif os.path.isdir(item_path):
            shutil.rmtree(item_path)
    print("All files removed from directory.")


def is_pattern_malicious(analysis_result):
    """Проверка на наличие признаков уязвимости в выводе regexploit."""
    return "Worst-case complexity" in analysis_result


def analyze_file_with_regexploit(file_path):
    file_suffix = file_path.suffix.lower()

    if file_suffix == '.py':
        command = ['regexploit-py', str(file_path)]
    elif file_suffix in ['.js', '.ts']:
        command = ['regexploit-js', str(file_path)]
    elif file_suffix in ['.yaml', '.yml']:
        command = ['regexploit-yaml', str(file_path)]
    elif file_suffix == '.json':
        command = ['regexploit-json', str(file_path)]
    elif file_suffix == '.cs':
        command = ['regexploit-csharp', str(file_path)]
    else:
        return None  # Unsupported file type

    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        return stdout.decode()
    except Exception as e:
        return f"Error running regexploit: {str(e)}"


def should_ignore(file_path, ignore_patterns, use_gitignore=False):
    if use_gitignore:
        for pattern in ignore_patterns:
            if file_path.match(pattern):
                return False

    if file_path.suffix not in FILE_SUFFIX_CHECKER:
        return False

    return True


def scan_files(directory, ignore_patterns: List[str], use_gitignore=False):
    vulnerabilities = []
    for root, dirs, files in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in ['.git', '.idea', '__pycache__']]
        for file in files:
            file_path = pathlib.Path(os.path.join(root, file))

            if should_ignore(file_path, ignore_patterns, use_gitignore):
                print(f"Scanning file: {file_path}")
                result = analyze_file_with_regexploit(file_path)

                if result and "Vulnerable regex" in result:
                    file_path_relative = str(file_path).replace('/wd/app/temp_dir_zip', '')
                    line_number = int(result.split('#')[1].split('\n')[0])
                    vulnerability_pattern = result.split('Pattern: ')[1].split('\n')[0]

                    vulnerability_score = result.split('starriness=')[1].split(',')[0].strip()

                    # Поиск начала redos_sequence
                    redos_start = result.index('redos_sequence=') + len('redos_sequence=')
                    open_braces = 0
                    close_braces = 0
                    redos_end = redos_start

                    # Поиск конца redos_sequence
                    for i in range(redos_start, len(result)):
                        if result[i] == '{':
                            open_braces += 1
                        elif result[i] == '}':
                            close_braces += 1
                        if open_braces > 0 and open_braces == close_braces:
                            redos_end = i + 1
                            break

                    redos_sequence = result[redos_start:redos_end]

                    repeated_character = result.split('repeated_character=')[1].split(']')[0] + ']'
                    worst_case_complexity = result.split('Worst-case complexity: ')[1].split(' (')[0]
                    sample_input = result.split('Example: ')[1].strip()

                    vulnerability_info = {
                        "file": file_path_relative,
                        "line": line_number,
                        "vulnerability_pattern": vulnerability_pattern,
                        "details": {
                            "vulnerability_score": int(vulnerability_score),
                            "redos_sequence": redos_sequence,
                            "repeated_character": repeated_character,
                            "worst_case_complexity": worst_case_complexity,
                            "sample_input": sample_input
                        }
                    }
                    vulnerabilities.append(vulnerability_info)

    return vulnerabilities


def main(repo_url=None, zip_file_name=None, json_file=None, token=None, use_gitignore=False):
    directory: Final[pathlib.Path] = MAIN_DIR / "temp_dir_zip"
    directory.mkdir(parents=True, exist_ok=True)

    if repo_url:
        print(f"Directory {directory} is empty. Cloning repository...")
        clone_repo(repo_url, directory, token)
    elif zip_file_name:
        zip_file_path = directory / zip_file_name
        copy_zip_to_directory(zip_file_path, directory)
    else:
        print(f"Directory {directory} is empty.")

    extract_archives_in(directory)

    ignore_patterns = []
    if use_gitignore:
        ignore_patterns = load_gitignore(directory)

    vulnerabilities = scan_files(directory, ignore_patterns, use_gitignore)

    if vulnerabilities == []:
        vulnerabilities = {"Empty": "No vulnerable patterns found"}

    save_results_to_json(vulnerabilities, json_file)

    remove_all_files(directory)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Scan repository or directory for files.')
    parser.add_argument('--repo-url', type=str, help='URL of the git repository.')
    # parser.add_argument('--token', type=str, help='GitHub Personal Access Token for private repositories.')
    parser.add_argument('--input-zip', type=pathlib.Path, help='Path to the input zip.')
    parser.add_argument('--output', type=pathlib.Path, help='Path to save the analysis results in JSON format.')
    parser.add_argument('--git-ignore', action='store_true', help='Use .gitignore to skip files and directories.')
    parser.add_argument('--suffix', default='all',
                        help="Use suffix for only this file type, choose any (1-7)"
                             "['.py', '.js', '.ts', '.cs', '.yaml', '.yml', '.json']"
                        )

    args = parser.parse_args()
    MAIN_DIR: Final[pathlib.Path] = pathlib.Path(__file__).parent
    JSON_FILE: Final[pathlib.Path] = MAIN_DIR / args.output
    FILE_SUFFIX_CHECKER = args.suffix
    if args.suffix == 'all':
        FILE_SUFFIX_CHECKER = [
            '.py',
            '.js',
            '.ts',
            '.cs',
            '.yaml',
            '.yml',
            '.json',
        ]
    time_start = time.time()
    main(repo_url=args.repo_url, zip_file_name=args.input_zip, json_file=JSON_FILE, use_gitignore=args.git_ignore)
    print(time.time() - time_start)
