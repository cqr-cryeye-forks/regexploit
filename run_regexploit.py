import argparse
import json
import os
import pathlib
import shutil
import subprocess
import time
import zipfile
from typing import Final, List


def clone_repo(repo_url, dest_dir, token=None):
    repo_name = repo_url.split('/')[-1].replace('.git', '')
    repo_dir = os.path.join(dest_dir, repo_name)

    if token:
        if repo_url.startswith("https://"):
            repo_url = repo_url.replace("https://", f"https://{token}@")
        else:
            raise ValueError("Для использования токена необходим HTTPS URL репозитория.")

    print(f"Cloning repository from URL: {repo_url}")
    subprocess.run(['git', 'clone', repo_url, repo_dir], check=True)
    return repo_dir


def extract_archives(directory):
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if zipfile.is_zipfile(item_path):
            print(f"Extracting archive: {item_path}")
            with zipfile.ZipFile(item_path, 'r') as zip_ref:
                zip_ref.extractall(directory)
            os.remove(item_path)


def load_gitignore(directory):
    gitignore_path = directory / '.gitignore'
    ignore_patterns = []
    if gitignore_path.exists():
        with open(gitignore_path, 'r') as file:
            ignore_patterns = [line.strip() for line in file if line.strip() and not line.startswith('#')]
    return ignore_patterns


def save_results_to_json(results, json_file):
    with open(json_file, 'w', encoding='utf-8') as jf:
        json.dump(results, jf, indent=4)
    print(f"Results saved to {json_file}")
    print("=" * 44)
    print(results)


def remove_all_files(directory):
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if os.path.isfile(item_path) or os.path.islink(item_path):
            os.unlink(item_path)
        elif os.path.isdir(item_path):
            shutil.rmtree(item_path)
    print("All files removed from directory.")


def is_pattern_malicious(analysis_result):
    """Проверка на наличие признаков уязвимости в выводе regexploit."""
    return "Worst-case complexity" in analysis_result


def analyze_file_with_regexploit(file_path):
    file_suffix = file_path.suffix.lower()

    if file_suffix == '.py':
        command = ['regexploit-py', str(file_path)]
    elif file_suffix in ['.js', '.ts']:
        command = ['regexploit-js', str(file_path)]
    elif file_suffix == '.yaml':
        command = ['regexploit-yaml', str(file_path)]
    elif file_suffix == '.json':
        command = ['regexploit-json', str(file_path)]
    elif file_suffix == '.cs':
        command = ['regexploit-csharp', str(file_path)]
    else:
        return None  # Unsupported file type

    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        return stdout.decode()
    except Exception as e:
        return f"Error running regexploit: {str(e)}"


def should_ignore(file_path, ignore_patterns, use_gitignore=False):
    if use_gitignore:
        for pattern in ignore_patterns:
            if file_path.match(pattern):
                return False

    if file_path.suffix not in FILE_SUFFIX_CHECKER:
        return False

    return True


def scan_files(directory, ignore_patterns: List[str], use_gitignore=False):
    vulnerabilities = []
    for root, dirs, files in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in ['.git', '.idea', '__pycache__']]
        for file in files:
            file_path = pathlib.Path(os.path.join(root, file))

            if should_ignore(file_path, ignore_patterns, use_gitignore):
                print(f"Scanning file: {file_path}")
                result = analyze_file_with_regexploit(file_path)

                if result:
                    if is_pattern_malicious(result):
                        vulnerability_info = {
                            'file': str(file_path),
                            'analysis_result': result
                        }
                        vulnerabilities.append(vulnerability_info)
    return vulnerabilities


def main(repo_url=None, directory=None, json_file=None, token=None, use_gitignore=False):
    if directory is None:
        raise ValueError("Argument '--directory' is required.")

    directory = pathlib.Path(directory)
    directory.mkdir(parents=True, exist_ok=True)

    if not any(directory.iterdir()):
        if repo_url:
            print(f"Directory {directory} is empty. Cloning repository...")
            clone_repo(repo_url, directory, token)
        else:
            print(f"Directory {directory} is empty.")
            return

    extract_archives(directory)

    ignore_patterns = []
    if use_gitignore:
        ignore_patterns = load_gitignore(directory)

    vulnerabilities = scan_files(directory, ignore_patterns, use_gitignore)

    save_results_to_json(vulnerabilities, json_file)

    remove_all_files(directory)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Scan repository or directory for files.')
    parser.add_argument('--repo_url', type=str, help='URL of the git repository.')
    # parser.add_argument('--token', type=str, help='GitHub Personal Access Token for private repositories.')
    parser.add_argument('--directory', type=pathlib.Path, help='Path to the directory.', required=True)
    parser.add_argument('--output', type=pathlib.Path, help='Path to save the analysis results in JSON format.')
    parser.add_argument('--git-ignore', action='store_true', help='Use .gitignore to skip files and directories.')
    parser.add_argument('--suffix', default='all',
                        help="Use suffix for only this file type, choose any (1-7)"
                             "['.py', '.js', '.ts', '.cs', '.yaml', '.yml', '.json']"
                        )

    args = parser.parse_args()

    JSON_FILE: Final[pathlib.Path] = args.output if args.output else None
    FILE_SUFFIX_CHECKER = [args.suffix]
    if args.suffix == 'all':
        FILE_SUFFIX_CHECKER = [
            '.py',
            '.js',
            '.ts',
            '.cs',
            '.yaml',
            '.yml',
            '.json',
        ]
    time_start = time.time()
    main(repo_url=args.repo_url, directory=args.directory, json_file=JSON_FILE, use_gitignore=args.git_ignore)
    print(time.time() - time_start)
