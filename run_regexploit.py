import argparse
import os
import re
import subprocess
import zipfile
from tempfile import TemporaryDirectory

from git import Repo


def extract_files_from_archive(archive_path, extract_to):
    with zipfile.ZipFile(archive_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)


def clone_git_repo(git_url, clone_to):
    Repo.clone_from(git_url, clone_to)


def find_regex_patterns_in_file(file_path):
    regex_patterns = []
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            matches = re.findall(r'(?<!\\)(?:\\\\)*(\'.*?\')', line) + re.findall(r'(?<!\\)(?:\\\\)*(\".*?\")', line)
            regex_patterns.extend([match.strip('\'"') for match in matches])
    return regex_patterns


def analyze_with_regexploit(regex_pattern):
    try:
        process = subprocess.Popen(['regexploit'], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = process.communicate(input=regex_pattern.encode())
        return stdout.decode()
    except Exception as e:
        return f"Error running regexploit: {str(e)}"


def is_pattern_malicious(analysis_result):
    """Проверка на наличие признаков уязвимости в выводе regexploit."""
    return "Worst-case complexity" in analysis_result


def main(input_source, is_git=False):
    with TemporaryDirectory() as tmpdir:
        if is_git:
            clone_git_repo(input_source, tmpdir)
        else:
            extract_files_from_archive(input_source, tmpdir)

        for root, dirs, files in os.walk(tmpdir):
            for file in files:
                if file.endswith(('.py', '.js', '.yaml', '.json', '.java', '.php', '.rb', '.pl', '.pm', '.cs', '.sh',
                                  '.html', '.htm')):
                    file_path = os.path.join(root, file)
                    patterns = find_regex_patterns_in_file(file_path)

                    for pattern in patterns:
                        # print(f"Found pattern: {pattern} in file {file_path}")
                        result = analyze_with_regexploit(pattern)

                        if is_pattern_malicious(result):
                            print(f"Pattern {pattern} is potentially malicious!\nAnalysis result:\n{result}\n")
                        # else:
                        #     print(f"Pattern {pattern} is not considered malicious.\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Scan code for regex patterns and analyze for ReDoS vulnerabilities.')
    parser.add_argument('--input_source', type=str, help='Path to archive or URL of git repository.')
    parser.add_argument('--git', action='store_true', help='Indicates that the input source is a git repository URL.')

    args = parser.parse_args()
    main(args.input_source, args.git)
